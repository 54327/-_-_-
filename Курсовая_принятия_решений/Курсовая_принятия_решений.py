import numpy as np

# Таблица значений случайного индекса согласованности (RI)
RI = {1: 0, 2: 0, 3: 0.58, 4: 0.9, 5: 1.12, 6: 1.24, 7: 1.32, 8: 1.41, 9: 1.45, 10: 1.49}

# Построение матрицы парных сравнений
# 1. Примите матрицу попарного сравнения.
# 2. Верните нормализованный вес, максимальное собственное значение, индекс согласованности (CI) и коэффициент согласованности (CR).
def pairwise_matrix(matrix):
    """
    Вычисление среднего геометрического и нормализованных весов
    :param matrix: матрица попарного сравнения (numpy array)
    :return: Нормализованный вес, максимальное собственное значение, CI, CR
    """
    n = len(matrix)
    geometric_mean = np.prod(matrix, axis=1) ** (1/n)
    weights = geometric_mean / sum(geometric_mean)
    
    # Проверка согласованности
    lambda_max = sum(np.dot(matrix, weights) / weights) / n
    CI = (lambda_max - n) / (n - 1)
    CR = CI / RI[n] if n in RI else 0
    
    return weights, lambda_max, CI, CR

# Пример: Построение стандартной весовой матрицы
criteria_matrix = np.array([
    [1, 3, 5, 7, 9, 2],
    [1/3, 1, 2, 5, 7, 1],
    [1/5, 1/2, 1, 3, 5, 1/2],
    [1/7, 1/5, 1/3, 1, 2, 1/5],
    [1/9, 1/7, 1/5, 1/2, 1, 1/7],
    [1/2, 1, 2, 5, 7, 1]
])

# Рассчитать вес и консистенцию эталонов
criteria_weights, lambda_max, CI, CR = pairwise_matrix(criteria_matrix)
print("Стандартный вес:", criteria_weights)
print("Коэффициент согласованности (CR):", CR)

if CR > 0.2:
    print("Проверка согласованности не удалась, пожалуйста, настройте матрицу！")
else:
    print("Проверка целостности пройдена")

# Пример: Матрица сравнения альтернатив (рентабельность)
alt_matrix_profit = np.array([
    [1, 5, 3, 7, 9],
    [1/5, 1, 1/3, 5, 7],
    [1/3, 3, 1, 3, 5],
    [1/7, 1/5, 1/3, 1, 2],
    [1/9, 1/7, 1/5, 1/2, 1]
])

# Рассчитайте вес и согласованность альтернатив.
alt_weights_profit, lambda_max, CI, CR = pairwise_matrix(alt_matrix_profit)
print("вес рентабельности:", alt_weights_profit)
print("Коэффициент согласованности (CR):", CR)

# Пример: Матрицы весов для других стандартов могут быть построены аналогичным образом.
# ...

# Комплексный расчет веса
criteria_weights = np.array([0.4, 0.2, 0.15, 0.1, 0.1, 0.05])  # Предполагая стандартные веса
alt_weights = np.array([
    alt_weights_profit,  # вес рентабельности
    [0.2, 0.3, 0.25, 0.15, 0.1],  # удобный вес
    [0.25, 0.2, 0.3, 0.15, 0.1],  # надежность вес
    [0.3, 0.25, 0.2, 0.15, 0.1],  # вес репутации
    [0.1, 0.2, 0.25, 0.3, 0.15],  # Вес качества обслуживания
    [0.05, 0.1, 0.2, 0.3, 0.35]   # вес уровня страховки
])

# Рассчитайте общий вес каждой альтернативы.
final_weights = np.dot(criteria_weights, alt_weights)
print("Общий вес:", final_weights)

# Рассмотрим ожидаемую полезность естественного состояния.
state_probabilities = np.array([0.2, 0.6, 0.2])  # вероятность состояния
state_weights = np.array([
    [0.4, 0.3, 0.2, 0.05, 0.05],  # рецессия
    [0.3, 0.25, 0.25, 0.1, 0.1],  # устойчивое состояние
    [0.2, 0.2, 0.3, 0.2, 0.1]     # восстановление экономики
])

# Рассчитайте ожидаемую полезность каждой альтернативы.
expected_utilities = np.dot(state_probabilities, state_weights)
print("ожидаемая полезность:", expected_utilities)

# Определите лучшее решение
best_option = np.argmax(expected_utilities) + 1
print("Лучший способ инвестировать: Банк", best_option)
